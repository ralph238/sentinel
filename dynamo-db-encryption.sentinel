# This policy uses the Sentinel tfplan/v2 import to require that

# Import the tfplan/v2 import, but use the alias "tfplan"
import "tfplan/v2" as tfplan

# Import common-functions/tfplan-functions.sentinel with alias "plan"
import "tfplan-functions" as plan

# Find all blocks of a specific type from a resource using the tfplan/v2 import.
# parent should be a single resource or block of a resource or a data source
# or a block of a data source.
# If parent is a resource, you can pass it in the form rc.change.after or just rc.
# child should be a string representing a block of parent
# that contains a list of objects.

main = rule {
find_blocks = func(server_side_encryption, enabled) {
  # Use parent.change.after if it exists
  if (types.type_of(server_side_encryption) is "map" and
     "change" in keys(server_side_encryption)) and
     (types.type_of(server_side_encryption.change) is "map" and
     "after" in keys(server_side_encryption.change)) {
    if types.type_of(server_side_encryption.change.after[enabled] else null) is "list" {
      return server_side_encryption.change.after[enabled]
    } else {
      return []
    }
  } else {
    if types.type_of(server_side_encryption[enabled] else null) is "list" {
  	  return server_side_encryption[enabled]
    } else {
      return []
    }
  }
}

}

# Main rule
#main = rule {
 # length(find_blocks["messages"]) is 0
#}
